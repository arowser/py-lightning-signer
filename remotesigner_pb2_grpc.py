# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import remotesigner_pb2 as remotesigner__pb2


class SignerStub(object):
  """Phase 1 API
  -----------

  In this phase, transactions are provided in serialized form to the
  signer.  There is also a somewhat redundant passing of
  channel-constant values into specific signing requests.

  In phase 2, transactions will be constructed on the signer from
  detailed information, such as amounts, to_self_delay, etc. .  See
  the Phase 2 section near the end of this file for a sketch.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/remotesigner.Signer/Ping',
        request_serializer=remotesigner__pb2.PingRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.PingReply.FromString,
        )
    self.Init = channel.unary_unary(
        '/remotesigner.Signer/Init',
        request_serializer=remotesigner__pb2.InitRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.InitReply.FromString,
        )
    self.GetExtPubKey = channel.unary_unary(
        '/remotesigner.Signer/GetExtPubKey',
        request_serializer=remotesigner__pb2.GetExtPubKeyRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.GetExtPubKeyReply.FromString,
        )
    self.NewChannel = channel.unary_unary(
        '/remotesigner.Signer/NewChannel',
        request_serializer=remotesigner__pb2.NewChannelRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.NewChannelReply.FromString,
        )
    self.ReadyChannel = channel.unary_unary(
        '/remotesigner.Signer/ReadyChannel',
        request_serializer=remotesigner__pb2.ReadyChannelRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.ReadyChannelReply.FromString,
        )
    self.SignMutualCloseTx = channel.unary_unary(
        '/remotesigner.Signer/SignMutualCloseTx',
        request_serializer=remotesigner__pb2.SignMutualCloseTxRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignMutualCloseTxPhase2 = channel.unary_unary(
        '/remotesigner.Signer/SignMutualCloseTxPhase2',
        request_serializer=remotesigner__pb2.SignMutualCloseTxPhase2Request.SerializeToString,
        response_deserializer=remotesigner__pb2.CloseTxSignatureReply.FromString,
        )
    self.CheckFutureSecret = channel.unary_unary(
        '/remotesigner.Signer/CheckFutureSecret',
        request_serializer=remotesigner__pb2.CheckFutureSecretRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.CheckFutureSecretReply.FromString,
        )
    self.GetChannelBasepoints = channel.unary_unary(
        '/remotesigner.Signer/GetChannelBasepoints',
        request_serializer=remotesigner__pb2.GetChannelBasepointsRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.GetChannelBasepointsReply.FromString,
        )
    self.GetPerCommitmentPoint = channel.unary_unary(
        '/remotesigner.Signer/GetPerCommitmentPoint',
        request_serializer=remotesigner__pb2.GetPerCommitmentPointRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.GetPerCommitmentPointReply.FromString,
        )
    self.SignFundingTx = channel.unary_unary(
        '/remotesigner.Signer/SignFundingTx',
        request_serializer=remotesigner__pb2.SignFundingTxRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignFundingTxReply.FromString,
        )
    self.SignRemoteCommitmentTx = channel.unary_unary(
        '/remotesigner.Signer/SignRemoteCommitmentTx',
        request_serializer=remotesigner__pb2.SignRemoteCommitmentTxRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignRemoteCommitmentTxPhase2 = channel.unary_unary(
        '/remotesigner.Signer/SignRemoteCommitmentTxPhase2',
        request_serializer=remotesigner__pb2.SignRemoteCommitmentTxPhase2Request.SerializeToString,
        response_deserializer=remotesigner__pb2.CommitmentTxSignatureReply.FromString,
        )
    self.SignCommitmentTx = channel.unary_unary(
        '/remotesigner.Signer/SignCommitmentTx',
        request_serializer=remotesigner__pb2.SignCommitmentTxRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignLocalCommitmentTxPhase2 = channel.unary_unary(
        '/remotesigner.Signer/SignLocalCommitmentTxPhase2',
        request_serializer=remotesigner__pb2.SignLocalCommitmentTxPhase2Request.SerializeToString,
        response_deserializer=remotesigner__pb2.CommitmentTxSignatureReply.FromString,
        )
    self.SignLocalHTLCTx = channel.unary_unary(
        '/remotesigner.Signer/SignLocalHTLCTx',
        request_serializer=remotesigner__pb2.SignLocalHTLCTxRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignDelayedPaymentToUs = channel.unary_unary(
        '/remotesigner.Signer/SignDelayedPaymentToUs',
        request_serializer=remotesigner__pb2.SignDelayedPaymentToUsRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignRemoteHTLCTx = channel.unary_unary(
        '/remotesigner.Signer/SignRemoteHTLCTx',
        request_serializer=remotesigner__pb2.SignRemoteHTLCTxRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignRemoteHTLCToUs = channel.unary_unary(
        '/remotesigner.Signer/SignRemoteHTLCToUs',
        request_serializer=remotesigner__pb2.SignRemoteHTLCToUsRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignPenaltyToUs = channel.unary_unary(
        '/remotesigner.Signer/SignPenaltyToUs',
        request_serializer=remotesigner__pb2.SignPenaltyToUsRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignatureReply.FromString,
        )
    self.SignChannelAnnouncement = channel.unary_unary(
        '/remotesigner.Signer/SignChannelAnnouncement',
        request_serializer=remotesigner__pb2.SignChannelAnnouncementRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.SignChannelAnnouncementReply.FromString,
        )
    self.SignNodeAnnouncement = channel.unary_unary(
        '/remotesigner.Signer/SignNodeAnnouncement',
        request_serializer=remotesigner__pb2.SignNodeAnnouncementRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.NodeSignatureReply.FromString,
        )
    self.SignChannelUpdate = channel.unary_unary(
        '/remotesigner.Signer/SignChannelUpdate',
        request_serializer=remotesigner__pb2.SignChannelUpdateRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.NodeSignatureReply.FromString,
        )
    self.ECDH = channel.unary_unary(
        '/remotesigner.Signer/ECDH',
        request_serializer=remotesigner__pb2.ECDHRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.ECDHReply.FromString,
        )
    self.SignInvoice = channel.unary_unary(
        '/remotesigner.Signer/SignInvoice',
        request_serializer=remotesigner__pb2.SignInvoiceRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.RecoverableNodeSignatureReply.FromString,
        )
    self.SignMessage = channel.unary_unary(
        '/remotesigner.Signer/SignMessage',
        request_serializer=remotesigner__pb2.SignMessageRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.RecoverableNodeSignatureReply.FromString,
        )


class SignerServicer(object):
  """Phase 1 API
  -----------

  In this phase, transactions are provided in serialized form to the
  signer.  There is also a somewhat redundant passing of
  channel-constant values into specific signing requests.

  In phase 2, transactions will be constructed on the signer from
  detailed information, such as amounts, to_self_delay, etc. .  See
  the Phase 2 section near the end of this file for a sketch.

  """

  def Ping(self, request, context):
    """Trivial call to test connectivity
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Init(self, request, context):
    """Provision a signer for a new node
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetExtPubKey(self, request, context):
    """Get signing XPUB for a node.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NewChannel(self, request, context):
    """BOLT #2 - Peer Protocol - allocate a new channel
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReadyChannel(self, request, context):
    """BOLT #2 - Peer Protocol - memorize remote basepoints and funding outpoint
    Signatures can only be requested after this call.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignMutualCloseTx(self, request, context):
    """BOLT #2 - Channel Close - phase 1
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignMutualCloseTxPhase2(self, request, context):
    """BOLT #2 - Channel Close - phase 2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CheckFutureSecret(self, request, context):
    """BOLT #2 - Message Retransmission
    Used to recover from local data loss by checking that our secret
    provided by the peer is correct.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetChannelBasepoints(self, request, context):
    """BOLT #3 - Key Derivation
    Get our channel basepoints and funding pubkey
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPerCommitmentPoint(self, request, context):
    """BOLT #3 - Per-commitment Secret Requirements
    Get our current per-commitment point and the secret for the point
    at commitment n-2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignFundingTx(self, request, context):
    """BOLT #3 - Funding Transaction
    Sign the funding transaction
    TODO this must be done after we know the remote signature on the
    commitment tx - need an API call that provides this to the
    signer.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignRemoteCommitmentTx(self, request, context):
    """BOLT #3 - Commitment Transaction, phase 1
    Sign the remote commitment tx, at commitment time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignRemoteCommitmentTxPhase2(self, request, context):
    """BOLT #3 - Commitment Transaction and attached HTLCs, phase 2
    Sign the remote commitment tx and attached HTLCs, at commitment time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignCommitmentTx(self, request, context):
    """BOLT #3 - Commitment Transaction, , phase 1
    Sign the local commitment tx, at force-close time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignLocalCommitmentTxPhase2(self, request, context):
    """BOLT #3 - Commitment Transaction and attached HTLCs, phase 2
    Sign the local commitment tx and attached HTLCs, at force-close time.
    No further commitments can be signed on this channel.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignLocalHTLCTx(self, request, context):
    """BOLT #3 - HTLC Outputs, phase 1
    Sign an htlc-success tx spending a local HTLC output, assuming we
    know the preimage, at force-close time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignDelayedPaymentToUs(self, request, context):
    """BOLT #5 - Unilateral Close Handling, phase 1
    Sign a delayed to-local output - either from the commitment tx or
    from an HTLC, at force-close time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignRemoteHTLCTx(self, request, context):
    """BOLT #3 - HTLC Outputs, phase 1
    Sign a remote HTLC tx, at commitment time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignRemoteHTLCToUs(self, request, context):
    """BOLT #3 - HTLC Outputs, phase 1 Sign an htlc-success tx on a
    remote HTLC output offered to us, assuming we know the preimage,
    at force-close time
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignPenaltyToUs(self, request, context):
    """BOLT #5 - Unilateral Close Handling, phase 1
    Sign a penalty tx to us - either sweeping the to-local commitment
    tx output or sweeping an HTLC tx output, after the remote
    broadcast a revoked commitment transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignChannelAnnouncement(self, request, context):
    """BOLT #7 - channel_announcement
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignNodeAnnouncement(self, request, context):
    """BOLT #7 - node_announcement
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignChannelUpdate(self, request, context):
    """BOLT #7 - channel_update
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ECDH(self, request, context):
    """BOLT #8 - Authenticated Key Agreement Handshake
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignInvoice(self, request, context):
    """BOLT #11 - Invoice Protocol
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignMessage(self, request, context):
    """BOLT #?? - Sign Message
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SignerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=remotesigner__pb2.PingRequest.FromString,
          response_serializer=remotesigner__pb2.PingReply.SerializeToString,
      ),
      'Init': grpc.unary_unary_rpc_method_handler(
          servicer.Init,
          request_deserializer=remotesigner__pb2.InitRequest.FromString,
          response_serializer=remotesigner__pb2.InitReply.SerializeToString,
      ),
      'GetExtPubKey': grpc.unary_unary_rpc_method_handler(
          servicer.GetExtPubKey,
          request_deserializer=remotesigner__pb2.GetExtPubKeyRequest.FromString,
          response_serializer=remotesigner__pb2.GetExtPubKeyReply.SerializeToString,
      ),
      'NewChannel': grpc.unary_unary_rpc_method_handler(
          servicer.NewChannel,
          request_deserializer=remotesigner__pb2.NewChannelRequest.FromString,
          response_serializer=remotesigner__pb2.NewChannelReply.SerializeToString,
      ),
      'ReadyChannel': grpc.unary_unary_rpc_method_handler(
          servicer.ReadyChannel,
          request_deserializer=remotesigner__pb2.ReadyChannelRequest.FromString,
          response_serializer=remotesigner__pb2.ReadyChannelReply.SerializeToString,
      ),
      'SignMutualCloseTx': grpc.unary_unary_rpc_method_handler(
          servicer.SignMutualCloseTx,
          request_deserializer=remotesigner__pb2.SignMutualCloseTxRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignMutualCloseTxPhase2': grpc.unary_unary_rpc_method_handler(
          servicer.SignMutualCloseTxPhase2,
          request_deserializer=remotesigner__pb2.SignMutualCloseTxPhase2Request.FromString,
          response_serializer=remotesigner__pb2.CloseTxSignatureReply.SerializeToString,
      ),
      'CheckFutureSecret': grpc.unary_unary_rpc_method_handler(
          servicer.CheckFutureSecret,
          request_deserializer=remotesigner__pb2.CheckFutureSecretRequest.FromString,
          response_serializer=remotesigner__pb2.CheckFutureSecretReply.SerializeToString,
      ),
      'GetChannelBasepoints': grpc.unary_unary_rpc_method_handler(
          servicer.GetChannelBasepoints,
          request_deserializer=remotesigner__pb2.GetChannelBasepointsRequest.FromString,
          response_serializer=remotesigner__pb2.GetChannelBasepointsReply.SerializeToString,
      ),
      'GetPerCommitmentPoint': grpc.unary_unary_rpc_method_handler(
          servicer.GetPerCommitmentPoint,
          request_deserializer=remotesigner__pb2.GetPerCommitmentPointRequest.FromString,
          response_serializer=remotesigner__pb2.GetPerCommitmentPointReply.SerializeToString,
      ),
      'SignFundingTx': grpc.unary_unary_rpc_method_handler(
          servicer.SignFundingTx,
          request_deserializer=remotesigner__pb2.SignFundingTxRequest.FromString,
          response_serializer=remotesigner__pb2.SignFundingTxReply.SerializeToString,
      ),
      'SignRemoteCommitmentTx': grpc.unary_unary_rpc_method_handler(
          servicer.SignRemoteCommitmentTx,
          request_deserializer=remotesigner__pb2.SignRemoteCommitmentTxRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignRemoteCommitmentTxPhase2': grpc.unary_unary_rpc_method_handler(
          servicer.SignRemoteCommitmentTxPhase2,
          request_deserializer=remotesigner__pb2.SignRemoteCommitmentTxPhase2Request.FromString,
          response_serializer=remotesigner__pb2.CommitmentTxSignatureReply.SerializeToString,
      ),
      'SignCommitmentTx': grpc.unary_unary_rpc_method_handler(
          servicer.SignCommitmentTx,
          request_deserializer=remotesigner__pb2.SignCommitmentTxRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignLocalCommitmentTxPhase2': grpc.unary_unary_rpc_method_handler(
          servicer.SignLocalCommitmentTxPhase2,
          request_deserializer=remotesigner__pb2.SignLocalCommitmentTxPhase2Request.FromString,
          response_serializer=remotesigner__pb2.CommitmentTxSignatureReply.SerializeToString,
      ),
      'SignLocalHTLCTx': grpc.unary_unary_rpc_method_handler(
          servicer.SignLocalHTLCTx,
          request_deserializer=remotesigner__pb2.SignLocalHTLCTxRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignDelayedPaymentToUs': grpc.unary_unary_rpc_method_handler(
          servicer.SignDelayedPaymentToUs,
          request_deserializer=remotesigner__pb2.SignDelayedPaymentToUsRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignRemoteHTLCTx': grpc.unary_unary_rpc_method_handler(
          servicer.SignRemoteHTLCTx,
          request_deserializer=remotesigner__pb2.SignRemoteHTLCTxRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignRemoteHTLCToUs': grpc.unary_unary_rpc_method_handler(
          servicer.SignRemoteHTLCToUs,
          request_deserializer=remotesigner__pb2.SignRemoteHTLCToUsRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignPenaltyToUs': grpc.unary_unary_rpc_method_handler(
          servicer.SignPenaltyToUs,
          request_deserializer=remotesigner__pb2.SignPenaltyToUsRequest.FromString,
          response_serializer=remotesigner__pb2.SignatureReply.SerializeToString,
      ),
      'SignChannelAnnouncement': grpc.unary_unary_rpc_method_handler(
          servicer.SignChannelAnnouncement,
          request_deserializer=remotesigner__pb2.SignChannelAnnouncementRequest.FromString,
          response_serializer=remotesigner__pb2.SignChannelAnnouncementReply.SerializeToString,
      ),
      'SignNodeAnnouncement': grpc.unary_unary_rpc_method_handler(
          servicer.SignNodeAnnouncement,
          request_deserializer=remotesigner__pb2.SignNodeAnnouncementRequest.FromString,
          response_serializer=remotesigner__pb2.NodeSignatureReply.SerializeToString,
      ),
      'SignChannelUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.SignChannelUpdate,
          request_deserializer=remotesigner__pb2.SignChannelUpdateRequest.FromString,
          response_serializer=remotesigner__pb2.NodeSignatureReply.SerializeToString,
      ),
      'ECDH': grpc.unary_unary_rpc_method_handler(
          servicer.ECDH,
          request_deserializer=remotesigner__pb2.ECDHRequest.FromString,
          response_serializer=remotesigner__pb2.ECDHReply.SerializeToString,
      ),
      'SignInvoice': grpc.unary_unary_rpc_method_handler(
          servicer.SignInvoice,
          request_deserializer=remotesigner__pb2.SignInvoiceRequest.FromString,
          response_serializer=remotesigner__pb2.RecoverableNodeSignatureReply.SerializeToString,
      ),
      'SignMessage': grpc.unary_unary_rpc_method_handler(
          servicer.SignMessage,
          request_deserializer=remotesigner__pb2.SignMessageRequest.FromString,
          response_serializer=remotesigner__pb2.RecoverableNodeSignatureReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'remotesigner.Signer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class VersionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Version = channel.unary_unary(
        '/remotesigner.Version/Version',
        request_serializer=remotesigner__pb2.VersionRequest.SerializeToString,
        response_deserializer=remotesigner__pb2.VersionReply.FromString,
        )


class VersionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Version(self, request, context):
    """Get detailed version information
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VersionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Version': grpc.unary_unary_rpc_method_handler(
          servicer.Version,
          request_deserializer=remotesigner__pb2.VersionRequest.FromString,
          response_serializer=remotesigner__pb2.VersionReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'remotesigner.Version', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
